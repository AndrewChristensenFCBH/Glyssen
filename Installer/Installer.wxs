<?xml version="1.0" encoding="UTF-8"?>
<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.  this value should be B U I LD_SCRIPT_MUST_REPLACE_AT_RUNTIME (in quotes) -->
<?define Property_ProductVersion = "BUILD_SCRIPT_MUST_REPLACE_AT_RUNTIME" ?>
<!--this is replaced at build time by the msbuild 'package' target -->
<?define Property_ProductCode = "*" ?>
<!-- auto-generate a new guid each time -->
<?define Property_UpgradeCode = "{cd92c128-d3c7-4c9a-acc6-81e4184ef6ca}" ?>
<!--Don't even think of EVER changing this -->

<!-- good intro to the component vs. file thing, and why each file here is a separate component:
http://blogs.msdn.com/robmen/archive/2003/10/04/56479.aspx -->

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension"
      xmlns:fire="http://schemas.microsoft.com/wix/FirewallExtension">

  <Product Id="$(var.Property_ProductCode)" Name="Protoscript Generator $(var.Property_ProductVersion)" Language="1033"
             Version="$(var.Property_ProductVersion)" Manufacturer="FCBH-SIL"
             UpgradeCode="$(var.Property_UpgradeCode)">

    <Package  Compressed="yes" InstallerVersion="200" />

    <!-- changed schedule from afterInstallInitialize, to afterInstallValidate, hopes that upgrades which have some library (e.g. palaso) with a lower version won't leave us
        with no palaso at all, as afterInstallInitialize was doing. But it's not clear whether even this will work, as it depends on when the "costing" happens:
        http://msdn.microsoft.com/en-us/library/aa371197.aspx -->
    <MajorUpgrade   Schedule="afterInstallValidate"
  DowngradeErrorMessage="A later version of Protoscript Generator is already installed. If you really want to downgrade, first uninstall Protoscript Generator, then do this install again."/>

    <Upgrade Id ="$(var.Property_UpgradeCode)" >
      <UpgradeVersion Minimum ="$(var.Property_ProductVersion)" OnlyDetect ="yes" Property ="NEWVERSIONDETECTED" />
      <UpgradeVersion Minimum ="0.0.0" IncludeMinimum ="yes" Maximum ="$(var.Property_ProductVersion)" IncludeMaximum ="no" Property ="OLDERVERSIONBEINGUPGRADED" />
    </Upgrade >

    <!--
    "from the list: Don't use Advertise="yes" Advertised shortcuts are designed to allow
users to install just the shortcut for your app, then demand-install the
rest of the app the first time the icon is run.  If this is not behavior you
are trying to support, you're better off using non-advertised shortcuts. "-->

    <PropertyRef Id="NETFRAMEWORK45" />
    <Condition Message="Before Protoscript Generator can install on older computers, you need to install Microsoft's free .NET Framework 4.5.">
      Installed OR NETFRAMEWORK45
    </Condition>

    <!--because of bug, this needs to be 1 -->
    <Property Id ="ALLUSERS">1</Property>

    <Directory Id="TARGETDIR" Name="SourceDir">

        <Directory Id="CommonAppDataFolder">
            <Directory Id="ProtoscriptGeneratorCommonAppData" Name="ProtoscriptGenerator">
              <Directory Id="SampleDataDir" Name="Samples">
              </Directory>
            </Directory>
        </Directory>

      <Directory Id='ProgramMenuFolder' Name='Programs'>
        <Directory Id='ProtoscriptGeneratorShortcutDir' Name='Protoscript Generator'>
          <Component Id ='removeShortcutDir' Guid ="{B8000306-EB15-4458-8264-97C1F888AD1E}">
            <RemoveFolder Id ="shortcutDirRemover" On ="uninstall"/>
            <RegistryKey Id="keyPathForRemoveShortcutDir" Action ="createAndRemoveOnUninstall" Root="HKCU" Key="SOFTWARE\ProtoscriptGenerator\Components\ProtoscriptGeneratorShortcutDir">
              <RegistryValue Type ="string" Value =""  Action ="write" KeyPath ="yes"/>
            </RegistryKey>
          </Component>

        </Directory>
      </Directory>
      <Directory Id="ProgramFilesFolder" Name="PFiles">

        <Directory Id="ProgramDir" Name="Protoscript Generator">
		  <Directory Id="XulRunnerDir" Name="XulRunner"/>
		  
          <Component Id="ProtoScript.exe" Guid="{A3493892-C68A-4f01-93BC-5F92B380CF89}">
            <Registry Root="HKCU" Key="SOFTWARE\ProtoscriptGenerator\Components\ProtoScript.exe" KeyPath="yes" />
            <File Id="ProtoScript.exe" Name="ProtoScript.exe"  Source="..\output\release\ProtoScript.exe" />

            <Shortcut Id="startmenuShortcut"  Directory="ProtoscriptGeneratorShortcutDir" Name="Protoscript Generator"
                 WorkingDirectory="ProgramDir" Target="[!ProtoScript.exe]"  Icon ="ProtoScript.exe" />

          </Component>

          <Component Id="ProtoScript.exe.config" Guid="{5173C7E9-39FD-4438-B1C1-BA187907AA35}">
            <File Id="ProtoScript.exe.config" Name="ProtoScript.exe.config" KeyPath="yes" Source="..\output\release\ProtoScript.exe.config" />
          </Component>

          <Component Id="Palaso.dll" Guid="{A46C492A-304B-47b8-A13A-7CE4896B5643}">
            <File Id="Palaso.dll" Name="Palaso.dll" KeyPath="yes" Source="..\output\release\Palaso.dll" />
          </Component>

          <Component Id="PalasoUIWindowsForms.dll" Guid="{1cacb7f4-7c49-43b6-a5cf-589954860844}">
            <File Id="PalasoUIWindowsForms.dll" Name="PalasoUIWindowsForms.dll" KeyPath="yes" Source="..\output\release\PalasoUIWindowsForms.dll" />
          </Component>

          <Component Id="PalasoUIWindowsForms.GeckoBrowserAdapter.dll" Guid="{bf4aa435-b585-43cf-9714-5c049eab1f9e}">
            <File Id="PalasoUIWindowsForms.GeckoBrowserAdapter.dll" Name="PalasoUIWindowsForms.GeckoBrowserAdapter.dll" KeyPath="yes" Source="..\output\release\PalasoUIWindowsForms.GeckoBrowserAdapter.dll" />
          </Component>

          <Component Id="Geckofx_Core.dll" Guid="{55db00fb-4a1f-437e-a14e-22c562aecd5a}">
            <File Id="Geckofx_Core.dll" Name="Geckofx-Core.dll" KeyPath="yes" Source="..\output\release\Geckofx-Core.dll" />
          </Component>

          <Component Id="Geckofx_Winforms.dll" Guid="{69cbecdc-dfc8-4f96-a947-5fca98f72c04}">
            <File Id="Geckofx_Winforms.dll" Name="Geckofx-Winforms.dll" KeyPath="yes" Source="..\output\release\Geckofx-Winforms.dll" />
          </Component>

          <Component Id="SIL.ScriptureUtils.dll" Guid="{386eb5b9-c3ef-4640-9400-e5efb3fc83c4}">
            <File Id="SIL.ScriptureUtils.dll" Name="SIL.ScriptureUtils.dll" KeyPath="yes" Source="..\output\release\SIL.ScriptureUtils.dll" />
          </Component>

          <Component Id="L10NSharp.dll" Guid="{59DBC21F-581C-4FA4-AF2F-EBDAC3A7697B}">
            <File Id="L10NSharp.dll" Name="L10NSharp.dll" KeyPath="yes" Source="..\output\release\L10NSharp.dll" />
          </Component>

          <Component Id="ICSharpCode.SharpZipLib.dll" Guid="{4B1E06ED-B1E2-4936-ADD9-0480421AB547}">
            <File Id="ICSharpCode.SharpZipLib.dll" Name="ICSharpCode.SharpZipLib.dll" KeyPath="yes" Source="..\output\release\ICSharpCode.SharpZipLib.dll" />
          </Component>

        </Directory>
      </Directory>
    </Directory>


    <Feature Id="ProductFeature" Level="1" Title="Basic Stuff">
      <ComponentRef Id ="removeShortcutDir"/>
      <ComponentRef Id="Palaso.dll"/>
      <ComponentRef Id="PalasoUIWindowsForms.dll"/>
      <ComponentRef Id="PalasoUIWindowsForms.GeckoBrowserAdapter.dll"/>
      <ComponentRef Id="Geckofx_Core.dll"/>
      <ComponentRef Id="Geckofx_Winforms.dll"/>
      <ComponentRef Id="SIL.ScriptureUtils.dll"/>
      <ComponentRef Id="L10NSharp.dll"/>
      <ComponentRef Id="ICSharpCode.SharpZipLib.dll"/>
      <ComponentRef Id="ProtoScript.exe" />
      <ComponentRef Id="ProtoScript.exe.config" />
      
      <ComponentGroupRef Id="DistFiles"/>
	  <ComponentGroupRef Id="XulRunner" />
      
    </Feature>
    <Media Id="1" Cabinet="product.cab" EmbedCab="yes" />
    <Icon Id="ProtoScript.exe" SourceFile ="..\output\release\ProtoScript.exe" />
    <Property Id="ARPPRODUCTICON" Value="ProtoScript.exe" />
    <!-- what you see in add/remove programs control panel -->



    <CustomAction Id="LaunchProtoscriptGenerator"
                  FileKey="ProtoScript.exe"
                  ExeCommand=""
                  Return="asyncNoWait"/>

    <InstallExecuteSequence>

      <!--We need the condition here so that we only launch the executable when we make an installation but not when we remove the product-->
          <Custom Action='LaunchProtoscriptGenerator' After="InstallFinalize">NOT Installed</Custom>
        </InstallExecuteSequence>
  </Product>
</Wix>
